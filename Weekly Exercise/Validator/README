Name: Jenish Patel
ID #: 1572027
CMPUT 274 FALL 2019

Weekly Assignment: Validator

Included Files:
	* validator.py
	* README

Accessories:
	* None needed

Wiring instructions: 
	* None needed

Running instructions:
	Open the validator.py python file to view the code for this week's assignment.

General overiew:
	1)	The purpose of the program is to check if the password entered by the 	  user is valid and secured using the following guidelines:
		For it to be valid:
			1. Password must contain atleast 8 characters.
			2. Password cannot contain three forbidden characters.
		For it to be secured:
			1. It must be valid.
			2. Should contain atleast one lower and one upper case letter.
			3. Should contain atleast one numeric value.
			4. Should contain atleast one special character.
	2)	Second part of the program will create a pseudo-random password which
	    adheres the following criteria from the part 1.

Code simplified:
	The validate function checks for the validatity and security of the password. By the use of a for loop, each character from the string (password) is checked with the use of indexing, and then a if statements determines if the condition are true or false. The boolean variables keep track of which conditions are met and which are not. If all conditions are met, the validate function will return "Secure". Otherwise, it will return either "Invalid" or "Insecure".

	The generate function will generate a string (password) containing the specified number of characters (n) given by the user. A blank list with size n will store the characters once they are generated by the randint function, which is imported from the random module. 
		1. A for loop pass through each element of the list (lst) one by one.
		2. The first 4 elements will get a designated character. the character comes from the char function which takes in a random value between a predetermine set of integer which corresponds to a specific value in the ASCII table. 
			1.. The 1st element actually comes from the special characters list (special_chars) which was used in the validate function. A randomize number will index a character from special_chars and adds it to element 0. 
			2.. A random integer from 0-9 is added to element 1.
			3.. A random uppercase letter is added to element 2.
			4.. A random lowercase letter is added to element 3.
		3. For the remaining elements from 4 to n-1, any character from character from ASCII value of 33 to 122 is added. 
		4. After compeleting the lst, the lst is randomize to ensure no predictablity using the shuffle function imported from random module. The lst is join and convert to a string and returned.

	The last bit of code is the user input and output of the program

Notes and Assumptions
	It assumed that the number of characters entered will be 8 or greater. I have not added a while statement to keep asking the user to enter a number greater or equal to 8 due to the assumption.

	There was one exception with the extra characters which were placed into the list (lst). The ASCII values for decimal number from 33 to 122 contains the three forbidden characters. So to avoid for the user to re-run the program, the validate will take in the generated password and check for validitity. If the password is invalid, a while statement will run until a valid password is generated. 

If I have been not concise or I have missed out explaining a part of the code. Please feel free to comment so I can improve the README for future assignments. 
